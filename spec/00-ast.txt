type ValidIdentifier = String
type PropertyKey = String

type TopLevelDeclaration =
    + Import {
        specifier: String
        importList: Maybe $ List ValidIdentifier
    }
    + Export {
        identifiers: List ValidIdentifier
    }
    + ({
        identifier: ValidIdentifier
        isExported: Bool
    } | Declaration. (
        + ValueDeclaration $ Declaration & {
            value: Maybe Expression
            type: Maybe TypeExpression
        }
        + TypeDeclaration $ Declaration & {
            value: TypeExpression
        }
        // TODO: DataDeclaration
    ))
    + Infix {
        precedence: Ord
        identifier: ValidIdentifier
        associativity: LeftAssociative | RightAssociative
    }
    // TODO: Typeclass and instance

type RecordMember = Body. {
    name: PropertyKey
    value: Body
}

type Common = Body.
    + Function {
        binding: ValidIdentifer
        constraint: Maybe TypeExpression
        body: Body
    }
    + Application {
        target: Body
        argument: Body
    }
    + Identifier {
        identifier: ValidIdentifier
    }
    + StringLiteral {
        value: String
    }
    + Record {
        members: List $ RecordMember Body
    }

type FunctionType = a. {
    in: a
    out: a
}

type Expression =
    + Common Expression

type TypeExpression =
    + Common TypeExpression
    + Typeof {
        expression: Expression
    }
    + FunctionType TypeExpression

